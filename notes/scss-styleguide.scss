/*------------------------------------*\
    #CSS-GUIDELINES
\*------------------------------------*/

 // StudentOnline CSS Guidelines, inspired by http://cssguidelin.es

/**
    A series of high-arching principles, and code/syntax specific rules for creating manageable, clean stylesheets. Largely, though not completely, follows the CSS Guidelines laid out by @csswizardry. View http://cssguidelin.es for more information and examples.
 **/





/*------------------------------------*\
    #RULESETS
\*------------------------------------*/

/**
    This is a low-level comment explaining how to comment on specific declarations. You will use a footnote type of system to target specific line in your code.

    1. Related Selectors (ones modifying the same module) are grouped together. Unrelated rulesets are put on their own lines.

    2. CSS Property Order:
        Group properties by function.
        Utilize CSSComb to do this for you.
**/

.foo, .foo--bar, // [1]
.baz {
    display: block; // [2]
    background-color: green;
    color: red;
}





/*------------------------------------*\
    #NAMING-CONVENTION
\*------------------------------------*/

/**
    Use the BEM Naming Style. Block, Element, Modifier.
        Block: The sole root of the component.
        Element: A component part of the Block.
        Modifier: A variant or extension of the Block.

    1. Block - Use a single hyphen for multi-word modules. Never use camelCase or underscores. Your Block context starts at the most logical, self-contained, discrete location.

    2. Element - Use two underscores between the block and the element. If you add another element you do not need to step through every layer of the DOM. (Correct:  .person__eye {}  //  Incorrect: .person__head__eye {})

    3. Modifier - Use two hyphens between the block and the modifier (variant). Modifiers may be used on an element. (More info: http://cssguidelin.es/#modifying-elements)
**/

.todo-list { // [1]
    property: value;
}

.todo-list__item { // [2]
    property: value;
}

.todo-list--large { // [3]
    property: value;
}

// Use special classes prepended with js- for any javascript hooks.





/*------------------------------------*\
    #CSS-SELECTORS
\*------------------------------------*/

/**
    1. Selectors should have low specificty (No #IDs and very minimal nesting! Classes should be favored in almost every circumstance.) Location Independence!

    2. Be extremely reusable. Instead of putting all of an elements style in one class, consider breaking it out into many smaller classes that can be reused throughout many elements.
**/

header ul {} // [1] BAD!

.site-nav {} // [1] BETTER!


.calendar {} // [2] BAD!

.module--attention-grabbing {}, .center {}, .full-width {} // BETTER!

// Runs the risk of becoming out of date; not very maintainable.
.blue {
    color: blue;
}

// Depends on location in order to be rendered properly.
.header span {
    color: blue;
}

// Too specific; limits our ability to reuse.
.header-color {
    color: blue;
}

// Nicely abstracted, very portable, doesnâ€™t risk becoming out of date.
.highlight-color {
    color: blue;
}

/**
    "It is important to strike a balance between names that do not literally describe the style that the class brings, but also ones that do not explicitly describe specific use cases."

    * Select what you want explicitly, rather than relying on circumstance or coincidence. Good Selector Intent will rein in the reach and leak of your styles.

    * Write selectors for reusability, so that you can work more efficiently and reduce waste and repetition.

    * Do not nest selectors unnecessarily, because this will increase specificity and affect where else you can use your styles.

    * Do not qualify selectors unnecessarily, as this will impact the number of different elements you can apply styles to.

    * Keep selectors as short as possible, in order to keep specificity down and performance up. USE CAUTION BEFORE CHAINING SELECTORS.

    In short, simply try to be as modular as possible, while keeping specificity low, keeping as location independent as possible, and keeping code (logically!) DRY. Instead of overruling values in the same class, overrule with a new rule in a BEM style specific Block Modifier.

    THINK HARD when making a selector. Instead of spiraling down in the never ending struggle of specificity, go back and find where you had poor selector intent and fix it. FIX THE ROOT PROBLEM, don't just put another bandaid on the issue.
**/